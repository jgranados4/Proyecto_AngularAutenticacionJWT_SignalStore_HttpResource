import {
  HttpErrorResponse,
  HttpEvent,
  HttpHandlerFn,
  HttpInterceptorFn,
  HttpRequest,
} from '@angular/common/http';
import { inject } from '@angular/core';
import {
  catchError,
  finalize,
  Observable,
  switchMap,
  throwError,
  tap,
} from 'rxjs';
import { SignalStoreService } from '../services/TokenStore.service';
import { refreshToken } from '../models/AuthResponse';

/**
 * ‚úÖ Observable compartido para evitar m√∫ltiples refreshes simult√°neos
 * Se resetea a null despu√©s de completarse
 */
let refreshObservable: Observable<refreshToken> | null = null;

const PUBLIC_ENDPOINTS = [
  '/auth/login',
  '/auth/register',
  '/UsuarioAUs/login',
  '/UsuarioAUs/',
  '/login',
  '/register',
  '/DecodeToken',
  '/RefreshToken',
  '/public/',
];

const isPublicEndpoint = (url: string): boolean =>
  PUBLIC_ENDPOINTS.some((endpoint) => url.includes(endpoint));

/**
 * ‚úÖ INTERCEPTOR CONFIGURADO PARA LOGOUT DIRECTO (Sin auto-refresh preventivo)
 *
 * Funcionalidad:
 * 1. ‚ùå Auto-refresh preventivo DESACTIVADO (comentado para uso futuro)
 * 2. ‚úÖ Token expirado ‚Üí Logout inmediato
 * 3. ‚úÖ Error 401 ‚Üí Refresh manual + retry (solo si hay refreshToken v√°lido)
 * 4. ‚úÖ Evita refreshes concurrentes con Observable compartido
 *
 * NOTA: Para habilitar auto-refresh preventivo, descomenta la secci√≥n marcada
 */
export const tokenInterceptor: HttpInterceptorFn = (req, next) => {
  const tokenStore = inject(SignalStoreService);

  // ‚úÖ 1. Endpoints p√∫blicos pasan sin autenticaci√≥n
  if (isPublicEndpoint(req.url)) {
    return next(req);
  }

  const token = tokenStore.currentToken();
  const tokenStatus = tokenStore.tokenStatus();

  // ‚úÖ 2. Sin token ‚Üí Logout inmediato
  if (!token || tokenStatus === 'no-token') {
    console.warn('üö´ Request sin token autenticado - cerrando sesi√≥n');
    tokenStore.logoutAndNavigate();
    return throwError(
      () =>
        new HttpErrorResponse({
          status: 401,
          statusText: 'No autorizado - Sin token',
          url: req.url,
        })
    );
  }

  // ‚úÖ 3. Token validando ‚Üí Esperar validaci√≥n
  if (tokenStatus === 'validating') {
    console.log('‚è≥ Token validando, esperando...');
    return waitForTokenValidation(req, next, tokenStore);
  }

  // ‚úÖ 4. Token expirado ‚Üí LOGOUT DIRECTO (sin intentar refresh)
  if (tokenStatus === 'expired') {
    console.warn('‚è∞ Token expirado - cerrando sesi√≥n');
    return throwError(
      () =>
        new HttpErrorResponse({
          status: 401,
          statusText: 'Token expirado',
          url: req.url,
        })
    );
  }

  // ========================================================================
  // ‚ùå AUTO-REFRESH PREVENTIVO DESACTIVADO
  // ========================================================================
  // Para habilitar refresh autom√°tico antes de expiraci√≥n, descomenta:
  /*
  // ‚úÖ 5. AUTO-REFRESH PREVENTIVO (Si el token expira en < 3 minutos)
  if (tokenStore.needsRefreshSoon() && tokenStore.canRefreshNow()) {
    const segundosRestantes = tokenStore.tiempoRestanteSegundos();
    const minutosRestantes = Math.floor(segundosRestantes / 60);
    
    console.warn(
      `‚ö†Ô∏è Token expirar√° en ${minutosRestantes}m ${segundosRestantes % 60}s - refresh preventivo`
    );
    
    // Hacer refresh en paralelo pero NO bloquear el request actual
    triggerPreventiveRefresh(tokenStore);
  }
  */
  // ========================================================================

  // ‚úÖ 6. Token v√°lido ‚Üí Request normal
  const clonedReq = req.clone({
    setHeaders: { Authorization: `Bearer ${token}` },
  });

  return next(clonedReq).pipe(
    catchError((error: HttpErrorResponse) => {
      // Error 401 ‚Üí Intentar refresh SOLO si hay refreshToken v√°lido
      // (esto cubre casos donde el backend rechaza el token pero a√∫n no expir√≥ localmente)
      if (error.status === 401) {
        const hasRefreshToken = !!tokenStore.currentRefreshToken();

        if (hasRefreshToken) {
          console.warn('‚ùå Usted no tiene Autorizacion redirigir login');
          tokenStore.logoutAndNavigate();
        } else {
          console.error('‚ùå 401 sin refresh token - cerrando sesi√≥n');
          tokenStore.logoutAndNavigate();
          return throwError(() => error);
        }
      }

      return throwError(() => error);
    })
  );
};

// ========================================================================
// ‚ùå FUNCI√ìN DE REFRESH PREVENTIVO COMENTADA (Para uso futuro)
// ========================================================================
/*
function triggerPreventiveRefresh(tokenStore: SignalStoreService): void {
  // Si ya hay refresh en progreso, no hacer nada
  if (tokenStore.isRefreshing() || refreshObservable) {
    return;
  }

  // Respetar cooldown de 30 segundos
  if (!tokenStore.canRefreshNow()) {
    console.log('‚è≠Ô∏è Cooldown activo, refresh pospuesto');
    return;
  }

  console.log('üîÑ Iniciando refresh preventivo en background...');
  
  executeTokenRefresh(tokenStore).subscribe({
    next: () => {
      console.log('‚úÖ Refresh preventivo completado');
    },
    error: (error) => {
      console.error('‚ùå Error en refresh preventivo:', error);
      
      // Si el refresh preventivo falla por 401, cerrar sesi√≥n
      if (error.status === 401) {
        tokenStore.logoutAndNavigate();
      }
    },
  });
}
*/
// ========================================================================

/**
 * ‚úÖ Espera a que el token termine de validarse
 */
function waitForTokenValidation(
  originalReq: HttpRequest<unknown>,
  next: HttpHandlerFn,
  tokenStore: SignalStoreService
): Observable<HttpEvent<unknown>> {
  return new Observable<HttpEvent<unknown>>((subscriber) => {
    let attempts = 0;
    const maxAttempts = 50; // 5 segundos m√°ximo (50 * 100ms)
    const intervalMs = 100;

    const checkInterval = setInterval(() => {
      attempts++;
      const status = tokenStore.tokenStatus();

      // Token v√°lido ‚Üí Proceder con el request
      if (status === 'valid') {
        clearInterval(checkInterval);
        const validToken = tokenStore.currentToken();

        if (!validToken) {
          subscriber.error(
            new HttpErrorResponse({
              status: 401,
              statusText: 'Token no disponible despu√©s de validaci√≥n',
            })
          );
          return;
        }

        const clonedReq = originalReq.clone({
          setHeaders: { Authorization: `Bearer ${validToken}` },
        });

        next(clonedReq).subscribe(subscriber);
        return;
      }
      // Token con error o timeout ‚Üí Logout
      if (
        status === 'no-token' ||
        attempts >= maxAttempts
      ) {
        clearInterval(checkInterval);
        console.error(`‚ùå Validaci√≥n fall√≥: ${status}`);
        subscriber.error(
          new HttpErrorResponse({
            status: 401,
            statusText: `Validaci√≥n timeout/error: ${status}`,
            url: originalReq.url,
          })
        );
        return
      }
    }, intervalMs);
    return () => clearInterval(checkInterval);
  });
}

/**
 * ‚úÖ Maneja el refresh del token cuando recibe 401 (refresh manual)
 * Solo se ejecuta si hay un error 401 del backend, NO preventivamente
 */
function handleTokenRefresh(
  originalReq: HttpRequest<unknown>,
  next: HttpHandlerFn,
  tokenStore: SignalStoreService
): Observable<HttpEvent<unknown>> {
  // Ya hay refresh en progreso ‚Üí Esperar al mismo Observable
  if (refreshObservable) {
    console.log('‚è≥ Esperando refresh en progreso...');
    return refreshObservable.pipe(
      switchMap((resp: refreshToken) => {
        const retryReq = originalReq.clone({
          setHeaders: { Authorization: `Bearer ${resp.token}` },
        });
        return next(retryReq);
      }),
      catchError((error) => {
        // Si el refresh fall√≥, propagar el error
        return throwError(() => error);
      })
    );
  }

  // Verificar que tenemos refresh token
  const refreshTokenValue = tokenStore.currentRefreshToken();
  if (!refreshTokenValue) {
    console.error('‚ùå No hay refresh token disponible');
    tokenStore.logoutAndNavigate();
    return throwError(
      () =>
        new HttpErrorResponse({
          status: 401,
          statusText: 'Refresh token no disponible',
          url: originalReq.url,
        })
    );
  }

  // Respetar cooldown
  if (!tokenStore.canRefreshNow()) {
    console.warn('‚è≠Ô∏è Cooldown activo - cerrando sesi√≥n');
    tokenStore.logoutAndNavigate();
    return throwError(
      () =>
        new HttpErrorResponse({
          status: 401,
          statusText: 'Cooldown de refresh activo',
          url: originalReq.url,
        })
    );
  }

  // Iniciar nuevo refresh con Observable compartido
  console.log('üîÑ Iniciando refresh manual por 401...');
  refreshObservable = executeTokenRefresh(tokenStore);

  // Ejecutar refresh y reintentar request original
  return refreshObservable.pipe(
    switchMap((resp: refreshToken) => {
      console.log('‚úÖ Token refrescado, reintentando request');
      const retryReq = originalReq.clone({
        setHeaders: { Authorization: `Bearer ${resp.token}` },
      });
      return next(retryReq);
    }),
    catchError((refreshError: HttpErrorResponse) => {
      console.error('‚ùå Refresh manual fall√≥ - cerrando sesi√≥n');
      tokenStore.logoutAndNavigate();
      return throwError(() => refreshError);
    })
  );
}

/**
 * ‚úÖ Ejecuta el refresh del token y actualiza el store
 */
function executeTokenRefresh(
  tokenStore: SignalStoreService
): Observable<refreshToken> {
  // Marcar que estamos haciendo refresh
  tokenStore.startRefreshing();

  return tokenStore.RefreshToken().pipe(
    tap((resp: refreshToken) => {
      // Actualizar tokens en el store
      tokenStore.updateToken(resp.token);
      tokenStore.updateRefreshToken(resp.refreshToken);
      tokenStore.reloadTokenData();
      console.log('‚úÖ Tokens actualizados en store');
    }),
    catchError((refreshError: HttpErrorResponse) => {
      console.error('‚ùå Error al refrescar token:', refreshError);

      // Refresh token inv√°lido/revocado ‚Üí Cerrar sesi√≥n
      if (refreshError.status === 401) {
        const errorMsg = refreshError.error?.message || '';

        if (errorMsg.includes('revocado') || errorMsg.includes('inv√°lido')) {
          alert('üö® Tu sesi√≥n ha expirado. Inicia sesi√≥n nuevamente.');
        }

        tokenStore.logoutAndNavigate();
      }

      return throwError(() => refreshError);
    }),
    finalize(() => {
      // Limpiar estado de refresh
      tokenStore.finishRefreshing();
      refreshObservable = null;
      console.log('üîÑ Proceso de refresh finalizado');
    })
  );
}
